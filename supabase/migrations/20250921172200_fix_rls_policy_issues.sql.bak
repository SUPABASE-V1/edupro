-- Fix RLS Policy Issues
-- Date: 2025-09-21
-- Purpose: Fix policies that are causing 500 errors due to NULL organization_id and auth.uid() issues

BEGIN;

-- ====================================================================
-- PART 1: FIX ACTIVITY_LOGS POLICIES  
-- ====================================================================

-- Drop existing problematic policies
DROP POLICY IF EXISTS "activity_logs_org_select" ON activity_logs;
DROP POLICY IF EXISTS "activity_logs_org_modify" ON activity_logs;

-- Create better policies that handle NULL organization_id
CREATE POLICY "activity_logs_org_select"
ON activity_logs FOR SELECT TO authenticated
USING (
    -- Superadmins can see all activity logs
    EXISTS (
        SELECT 1 FROM profiles
        WHERE id = auth.uid()
        AND role = 'superadmin'
    )
    OR
    -- Users can see logs from their organization (handle NULL organization_id)
    (organization_id IS NOT NULL AND organization_id IN (
        SELECT organization_id FROM profiles
        WHERE id = auth.uid()
        AND organization_id IS NOT NULL
    ))
    OR
    -- If user's organization_id is NULL, they can't see any logs (except superadmin)
    (organization_id IS NULL AND EXISTS (
        SELECT 1 FROM profiles
        WHERE id = auth.uid()
        AND role = 'superadmin'
    ))
);

CREATE POLICY "activity_logs_org_modify"
ON activity_logs FOR ALL TO authenticated
USING (
    -- Superadmins can modify all activity logs
    EXISTS (
        SELECT 1 FROM profiles
        WHERE id = auth.uid()
        AND role = 'superadmin'
    )
    OR
    -- Admins and principals can modify logs from their organization
    (organization_id IS NOT NULL AND EXISTS (
        SELECT 1 FROM profiles
        WHERE id = auth.uid()
        AND organization_id = activity_logs.organization_id
        AND role IN ('admin', 'principal')
    ))
)
WITH CHECK (
    -- Only superadmins and organization admins can create/update
    EXISTS (
        SELECT 1 FROM profiles
        WHERE id = auth.uid()
        AND (
            role = 'superadmin' OR
            (role IN ('admin', 'principal') AND organization_id = activity_logs.organization_id)
        )
    )
);

-- ====================================================================
-- PART 2: FIX PROFILES POLICIES TO HANDLE NULL ORGANIZATION_ID
-- ====================================================================

-- Drop and recreate the problematic profiles policy  
DROP POLICY IF EXISTS "Admins can view profiles in their organization" ON profiles;

CREATE POLICY "Admins can view profiles in their organization"
ON profiles FOR SELECT TO authenticated
USING (
    -- Superadmins can see all profiles
    EXISTS (
        SELECT 1 FROM profiles admin
        WHERE admin.id = auth.uid()
        AND admin.role = 'superadmin'
    )
    OR
    -- Admins can see profiles in their organization (both must have non-NULL organization_id)
    EXISTS (
        SELECT 1 FROM profiles admin
        WHERE admin.id = auth.uid()
        AND admin.role IN ('admin', 'principal')
        AND admin.organization_id IS NOT NULL
        AND profiles.organization_id IS NOT NULL
        AND admin.organization_id = profiles.organization_id
    )
);

-- ====================================================================
-- PART 3: ADD SERVICE ROLE BYPASS POLICIES
-- ====================================================================

-- Add service role policies to bypass RLS for system operations
CREATE POLICY "Service role full access to activity_logs"
ON activity_logs FOR ALL TO service_role
USING (true)
WITH CHECK (true);

-- Ensure service role has full access to profiles (should already exist)
DROP POLICY IF EXISTS "Service role full access to profiles" ON profiles;
CREATE POLICY "Service role full access to profiles"
ON profiles FOR ALL TO service_role
USING (true)
WITH CHECK (true);

-- ====================================================================
-- PART 4: FIX PETTY_CASH_ACCOUNTS POLICY (from the error log)
-- ====================================================================

-- Check if petty_cash_accounts has policies, if not create them
DO $$
BEGIN
    -- Drop existing problematic policies if they exist
    DROP POLICY IF EXISTS "petty_cash_accounts_school_select" ON petty_cash_accounts;
    DROP POLICY IF EXISTS "petty_cash_accounts_school_modify" ON petty_cash_accounts;
    
    -- Create better policies
    CREATE POLICY "petty_cash_accounts_school_select"
    ON petty_cash_accounts FOR SELECT TO authenticated
    USING (
        -- Superadmins can see all accounts
        EXISTS (
            SELECT 1 FROM profiles
            WHERE id = auth.uid()
            AND role = 'superadmin'
        )
        OR
        -- Users can see accounts from their organization (map school_id to organization_id)
        (school_id IS NOT NULL AND school_id IN (
            SELECT organization_id FROM profiles
            WHERE id = auth.uid()
            AND organization_id IS NOT NULL
        ))
    );
    
    CREATE POLICY "petty_cash_accounts_school_modify"
    ON petty_cash_accounts FOR ALL TO authenticated
    USING (
        -- Superadmins can modify all accounts
        EXISTS (
            SELECT 1 FROM profiles
            WHERE id = auth.uid()
            AND role = 'superadmin'
        )
        OR
        -- Admins and principals can modify accounts from their organization
        (school_id IS NOT NULL AND EXISTS (
            SELECT 1 FROM profiles
            WHERE id = auth.uid()
            AND organization_id = petty_cash_accounts.school_id
            AND role IN ('admin', 'principal')
        ))
    )
    WITH CHECK (
        -- Same as USING clause for consistency
        EXISTS (
            SELECT 1 FROM profiles
            WHERE id = auth.uid()
            AND (
                role = 'superadmin' OR
                (role IN ('admin', 'principal') AND organization_id = petty_cash_accounts.school_id)
            )
        )
    );
    
    RAISE NOTICE 'Fixed petty_cash_accounts policies';
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'petty_cash_accounts table may not exist or policies already fixed';
END
$$;

-- ====================================================================
-- PART 5: UPDATE USERS WITH NULL ORGANIZATION_ID
-- ====================================================================

-- This is a data fix - update profiles that have NULL organization_id
-- We'll set them to a default organization or prompt admin to fix
UPDATE profiles 
SET organization_id = (
    SELECT id FROM preschools 
    WHERE name ILIKE '%default%' OR name ILIKE '%main%'
    LIMIT 1
)
WHERE organization_id IS NULL
AND role != 'superadmin'  -- Keep superadmin with NULL org_id
AND EXISTS (SELECT 1 FROM preschools LIMIT 1);  -- Only if preschools exist

-- If no default preschool, create one for orphaned users
DO $$
DECLARE
    default_preschool_id UUID;
    orphaned_count INTEGER;
BEGIN
    -- Count users without organization_id (excluding superadmins)
    SELECT COUNT(*) INTO orphaned_count
    FROM profiles 
    WHERE organization_id IS NULL 
    AND role != 'superadmin';
    
    IF orphaned_count > 0 THEN
        -- Check if a default preschool exists
        SELECT id INTO default_preschool_id
        FROM preschools 
        WHERE name ILIKE '%default%' 
        LIMIT 1;
        
        -- If no default preschool, create one
        IF default_preschool_id IS NULL THEN
            INSERT INTO preschools (id, name, address, phone, email, is_active)
            VALUES (
                gen_random_uuid(),
                'Default Organization',
                'TBD',
                'TBD',
                'admin@edudashpro.com',
                true
            )
            RETURNING id INTO default_preschool_id;
            
            RAISE NOTICE 'Created default organization with ID: %', default_preschool_id;
        END IF;
        
        -- Update orphaned users
        UPDATE profiles 
        SET organization_id = default_preschool_id
        WHERE organization_id IS NULL 
        AND role != 'superadmin';
        
        RAISE NOTICE 'Updated % users with default organization_id', orphaned_count;
    END IF;
END
$$;

COMMIT;