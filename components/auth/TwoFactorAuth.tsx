// 🔐 Two-Factor Authentication Component
// Comprehensive 2FA setup and verification with multiple methods

import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  ScrollView,
  Alert,
  ActivityIndicator,
  Dimensions,
  Platform,
  Share,
  Clipboard,
} from 'react-native';
import { useTheme } from '../../contexts/ThemeContext';
import { EnhancedUser } from '../../types/auth-enhanced';

const { width } = Dimensions.get('window');

interface TwoFactorAuthProps {
  user?: EnhancedUser;
  onSetupComplete?: (backupCodes: string[]) => void;
  onVerificationComplete?: () => void;
  onError?: (error: string) => void;
  mode: 'setup' | 'verification' | 'recovery';
  initialMethod?: MfaMethod;
  showBackButton?: boolean;
  onBack?: () => void;
}

export type MfaMethod = 'totp' | 'sms' | 'backup';

interface MfaSetup {
  totpSecret?: string;
  totpQrCode?: string;
  phoneNumber?: string;
  backupCodes?: string[];
  isEnabled: boolean;
}

interface VerificationState {
  code: string;
  method: MfaMethod;
  isVerifying: boolean;
  attempts: number;
  maxAttempts: number;
  cooldownUntil?: Date;
}

export const TwoFactorAuth: React.FC<TwoFactorAuthProps> = ({
  user,
  onSetupComplete,
  onVerificationComplete,
  onError,
  mode,
  initialMethod = 'totp',
  showBackButton = true,
  onBack
}) => {
  const { theme, isDark } = useTheme();
  
  // State management
  const [currentMethod, setCurrentMethod] = React.useState<MfaMethod>(initialMethod);
  const [mfaSetup, setMfaSetup] = React.useState<MfaSetup>({
    isEnabled: false
  });
  
  const [verificationState, setVerificationState] = React.useState<VerificationState>({
    code: '',
    method: initialMethod,
    isVerifying: false,
    attempts: 0,
    maxAttempts: 3
  });
  
  const [phoneNumber, setPhoneNumber] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(false);
  const [step, setStep] = React.useState(1);
  const [totalSteps, setTotalSteps] = React.useState(mode === 'setup' ? 3 : 1);

  // Initialize setup data
  React.useEffect(() => {
    if (mode === 'setup') {
      generateTotpSecret();
      generateBackupCodes();
    }
  }, [mode]);

  // Generate TOTP secret and QR code
  const generateTotpSecret = () => {
    // In a real app, this would be generated by your backend
    const mockSecret = 'JBSWY3DPEHPK3PXP'; // Base32 encoded secret
    const appName = 'EduDash Pro';
    const issuer = 'EduDash';
    const email = user?.email || 'user@example.com';
    
    // Generate otpauth URL for QR code
    const otpauthUrl = `otpauth://totp/${issuer}:${email}?secret=${mockSecret}&issuer=${issuer}`;
    
    setMfaSetup(prev => ({
      ...prev,
      totpSecret: mockSecret,
      totpQrCode: otpauthUrl
    }));
  };

  // Generate backup codes
  const generateBackupCodes = () => {
    const codes = [];
    for (let i = 0; i < 10; i++) {
      // Generate 8-digit backup codes
      const code = Math.random().toString(36).substring(2, 10).toUpperCase();
      codes.push(code);
    }
    setMfaSetup(prev => ({ ...prev, backupCodes: codes }));
  };

  // Handle phone number setup
  const setupPhoneNumber = async () => {
    if (!phoneNumber || phoneNumber.length < 10) {
      onError?.('Please enter a valid phone number');
      return;
    }
    
    setIsLoading(true);
    try {
      // Simulate SMS sending
      await new Promise(resolve => setTimeout(resolve, 1000));
      Alert.alert('SMS Sent', 'A verification code has been sent to your phone.');
      setStep(2);
    } catch (error) {
      onError?.('Failed to send SMS. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Verify TOTP code
  const verifyTotpCode = async (code: string) => {
    // In a real app, this would verify against your backend
    setIsLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Mock verification (accept 123456 for demo)
      if (code === '123456' || code.length === 6) {
        return true;
      }
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // Handle verification
  const handleVerification = async () => {
    if (!verificationState.code || verificationState.code.length !== 6) {
      onError?.('Please enter a valid 6-digit code');
      return;
    }

    setVerificationState(prev => ({ ...prev, isVerifying: true }));
    
    try {
      let isValid = false;
      
      switch (verificationState.method) {
        case 'totp':
          isValid = await verifyTotpCode(verificationState.code);
          break;
        case 'sms':
          // Mock SMS verification
          isValid = verificationState.code === '123456';
          break;
        case 'backup':
          // Check if code is in backup codes
          isValid = mfaSetup.backupCodes?.includes(verificationState.code.toUpperCase()) || false;
          break;
      }
      
      if (isValid) {
        if (mode === 'setup') {
          setMfaSetup(prev => ({ ...prev, isEnabled: true }));
          onSetupComplete?.(mfaSetup.backupCodes || []);
        } else {
          onVerificationComplete?.();
        }
        
        // Reset verification state
        setVerificationState(prev => ({ 
          ...prev, 
          code: '', 
          attempts: 0,
          isVerifying: false 
        }));
      } else {
        const newAttempts = verificationState.attempts + 1;
        setVerificationState(prev => ({ 
          ...prev, 
          attempts: newAttempts,
          code: '',
          isVerifying: false
        }));
        
        if (newAttempts >= verificationState.maxAttempts) {
          const cooldownTime = new Date(Date.now() + 5 * 60 * 1000); // 5 minutes
          setVerificationState(prev => ({ 
            ...prev, 
            cooldownUntil: cooldownTime
          }));
          onError?.('Too many failed attempts. Please try again in 5 minutes.');
        } else {
          onError?.(`Invalid code. ${verificationState.maxAttempts - newAttempts} attempts remaining.`);
        }
      }
    } catch (error) {
      onError?.('Verification failed. Please try again.');
      setVerificationState(prev => ({ ...prev, isVerifying: false }));
    }
  };

  // Copy backup codes to clipboard
  const copyBackupCodes = async () => {
    if (mfaSetup.backupCodes) {
      const codesText = mfaSetup.backupCodes.join('\n');
      await Clipboard.setString(codesText);
      Alert.alert('Copied', 'Backup codes copied to clipboard');
    }
  };

  // Share backup codes
  const shareBackupCodes = async () => {
    if (mfaSetup.backupCodes) {
      const codesText = `EduDash Pro Backup Codes:\n\n${mfaSetup.backupCodes.join('\n')}\n\nKeep these codes safe and secure.`;
      try {
        await Share.share({ message: codesText });
      } catch (error) {
        console.error('Failed to share backup codes:', error);
      }
    }
  };

  // Render QR code (mock implementation)
  const renderQrCode = () => {
    if (!mfaSetup.totpQrCode) return null;
    
    return (
      <View style={[styles.qrContainer, { backgroundColor: theme.surface }]}>
        {/* Mock QR Code - in a real app, use a QR code library */}
        <View style={[styles.qrCode, { backgroundColor: theme.text }]}>
          <Text style={[styles.qrText, { color: theme.surface }]}>
            QR CODE
          </Text>
          <Text style={[styles.qrSubtext, { color: theme.surface }]}>
            Scan with authenticator app
          </Text>
        </View>
        
        <View style={styles.qrInstructions}>
          <Text style={[styles.instructionTitle, { color: theme.text }]}>
            Setup Instructions:
          </Text>
          <Text style={[styles.instructionText, { color: theme.textSecondary }]}>
            1. Open your authenticator app
          </Text>
          <Text style={[styles.instructionText, { color: theme.textSecondary }]}>
            2. Scan the QR code above
          </Text>
          <Text style={[styles.instructionText, { color: theme.textSecondary }]}>
            3. Enter the 6-digit code below
          </Text>
        </View>
        
        {/* Manual entry option */}
        <TouchableOpacity
          style={styles.manualEntryButton}
          onPress={() => {
            Alert.alert(
              'Manual Entry',
              `Secret Key: ${mfaSetup.totpSecret}\n\nCopy this key and add it manually to your authenticator app.`,
              [
                { text: 'Cancel', style: 'cancel' },
                { 
                  text: 'Copy Key', 
                  onPress: () => {
                    Clipboard.setString(mfaSetup.totpSecret || '');
                    Alert.alert('Copied', 'Secret key copied to clipboard');
                  }
                }
              ]
            );
          }}
        >
          <Text style={[styles.manualEntryText, { color: theme.primary }]}>
            Can't scan? Enter code manually
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  // Render method selection
  const renderMethodSelection = () => {
    const methods = [
      { 
        type: 'totp' as MfaMethod, 
        title: 'Authenticator App', 
        subtitle: 'Google Authenticator, Authy, etc.',
        icon: '📱',
        recommended: true
      },
      { 
        type: 'sms' as MfaMethod, 
        title: 'SMS Text Message', 
        subtitle: 'Receive codes via text',
        icon: '💬',
        recommended: false
      }
    ];

    return (
      <View style={styles.methodSelection}>
        <Text style={[styles.sectionTitle, { color: theme.text }]}>
          Choose your 2FA method:
        </Text>
        
        {methods.map((method) => (
          <TouchableOpacity
            key={method.type}
            style={[
              styles.methodCard,
              {
                backgroundColor: currentMethod === method.type 
                  ? theme.primaryLight + '20' 
                  : theme.surface,
                borderColor: currentMethod === method.type 
                  ? theme.primary 
                  : theme.border
              }
            ]}
            onPress={() => setCurrentMethod(method.type)}
          >
            <View style={styles.methodIcon}>
              <Text style={styles.methodEmoji}>{method.icon}</Text>
              {method.recommended && (
                <View style={[styles.recommendedBadge, { backgroundColor: theme.primary }]}>
                  <Text style={[styles.recommendedText, { color: theme.onPrimary }]}>
                    Recommended
                  </Text>
                </View>
              )}
            </View>
            
            <View style={styles.methodInfo}>
              <Text style={[styles.methodTitle, { color: theme.text }]}>
                {method.title}
              </Text>
              <Text style={[styles.methodSubtitle, { color: theme.textSecondary }]}>
                {method.subtitle}
              </Text>
            </View>
            
            <View style={styles.methodSelector}>
              <View style={[
                styles.radioButton,
                {
                  borderColor: theme.primary,
                  backgroundColor: currentMethod === method.type 
                    ? theme.primary 
                    : 'transparent'
                }
              ]}>
                {currentMethod === method.type && (
                  <View style={[styles.radioInner, { backgroundColor: theme.onPrimary }]} />
                )}
              </View>
            </View>
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  // Render backup codes
  const renderBackupCodes = () => {
    if (!mfaSetup.backupCodes) return null;
    
    return (
      <View style={styles.backupCodesContainer}>
        <View style={[styles.backupHeader, { backgroundColor: theme.warningLight + '20' }]}>
          <Text style={[styles.backupTitle, { color: theme.text }]}>
            🔑 Backup Recovery Codes
          </Text>
          <Text style={[styles.backupSubtitle, { color: theme.textSecondary }]}>
            Save these codes in a secure location. Each can only be used once.
          </Text>
        </View>
        
        <View style={[styles.codesGrid, { backgroundColor: theme.surface }]}>
          {mfaSetup.backupCodes.map((code, index) => (
            <View key={index} style={[styles.codeItem, { borderColor: theme.border }]}>
              <Text style={[styles.codeText, { color: theme.text }]}>
                {code}
              </Text>
            </View>
          ))}
        </View>
        
        <View style={styles.backupActions}>
          <TouchableOpacity 
            style={[styles.backupButton, { backgroundColor: theme.primary }]}
            onPress={copyBackupCodes}
          >
            <Text style={[styles.backupButtonText, { color: theme.onPrimary }]}>
              📋 Copy Codes
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={[styles.backupButton, { backgroundColor: theme.secondary }]}
            onPress={shareBackupCodes}
          >
            <Text style={[styles.backupButtonText, { color: theme.onSecondary }]}>
              📤 Share Codes
            </Text>
          </TouchableOpacity>
        </View>
        
        <View style={[styles.warningBox, { backgroundColor: theme.errorLight + '20' }]}>
          <Text style={[styles.warningText, { color: theme.error }]}>
            ⚠️ Important: Store these codes safely. If you lose access to your authenticator, these are your only way back into your account.
          </Text>
        </View>
      </View>
    );
  };

  // Render verification input
  const renderVerificationInput = () => {
    const isCooldown = verificationState.cooldownUntil && verificationState.cooldownUntil > new Date();
    
    return (
      <View style={styles.verificationContainer}>
        <View style={styles.verificationHeader}>
          <Text style={[styles.verificationTitle, { color: theme.text }]}>
            {verificationState.method === 'backup' ? '🔑 Enter Backup Code' : '🔐 Enter Verification Code'}
          </Text>
          <Text style={[styles.verificationSubtitle, { color: theme.textSecondary }]}>
            {verificationState.method === 'totp' && 'Enter the 6-digit code from your authenticator app'}
            {verificationState.method === 'sms' && 'Enter the code sent to your phone'}
            {verificationState.method === 'backup' && 'Enter one of your 8-character backup codes'}
          </Text>
        </View>
        
        <View style={styles.codeInputContainer}>
          <TextInput
            style={[
              styles.codeInput,
              {
                backgroundColor: theme.surface,
                borderColor: theme.border,
                color: theme.text,
                letterSpacing: 4,
                fontSize: 20,
                textAlign: 'center' as const,
              }
            ]}
            value={verificationState.code}
            onChangeText={code => 
              setVerificationState(prev => ({ ...prev, code: code.toUpperCase() }))
            }
            placeholder={verificationState.method === 'backup' ? 'ABC12345' : '123456'}
            placeholderTextColor={theme.textSecondary}
            keyboardType={verificationState.method === 'backup' ? 'default' : 'numeric'}
            maxLength={verificationState.method === 'backup' ? 8 : 6}
            editable={!isCooldown && !verificationState.isVerifying}
            autoComplete="one-time-code"
            textContentType="oneTimeCode"
            autoCapitalize="characters"
          />
        </View>
        
        {/* Alternative methods */}
        {mode === 'verification' && (
          <View style={styles.alternativeMethods}>
            <Text style={[styles.alternativeText, { color: theme.textSecondary }]}>
              Having trouble?
            </Text>
            <View style={styles.alternativeButtons}>
              {verificationState.method !== 'backup' && (
                <TouchableOpacity
                  onPress={() => setVerificationState(prev => ({ 
                    ...prev, 
                    method: 'backup',
                    code: ''
                  }))}
                >
                  <Text style={[styles.alternativeLink, { color: theme.primary }]}>
                    Use backup code
                  </Text>
                </TouchableOpacity>
              )}
              {verificationState.method === 'backup' && (
                <TouchableOpacity
                  onPress={() => setVerificationState(prev => ({ 
                    ...prev, 
                    method: 'totp',
                    code: ''
                  }))}
                >
                  <Text style={[styles.alternativeLink, { color: theme.primary }]}>
                    Use authenticator
                  </Text>
                </TouchableOpacity>
              )}
            </View>
          </View>
        )}
        
        <TouchableOpacity
          style={[
            styles.verifyButton,
            {
              backgroundColor: (verificationState.isVerifying || isCooldown) 
                ? theme.surfaceVariant 
                : theme.primary
            }
          ]}
          onPress={handleVerification}
          disabled={verificationState.isVerifying || isCooldown}
        >
          {verificationState.isVerifying ? (
            <ActivityIndicator color={theme.onPrimary} />
          ) : (
            <Text style={[styles.verifyButtonText, { color: theme.onPrimary }]}>
              {mode === 'setup' ? 'Verify & Enable 2FA' : 'Verify'}
            </Text>
          )}
        </TouchableOpacity>
        
        {verificationState.attempts > 0 && verificationState.attempts < verificationState.maxAttempts && (
          <Text style={[styles.attemptsWarning, { color: theme.warning }]}>
            {verificationState.maxAttempts - verificationState.attempts} attempts remaining
          </Text>
        )}
        
        {isCooldown && (
          <Text style={[styles.cooldownText, { color: theme.error }]}>
            Too many failed attempts. Try again in a few minutes.
          </Text>
        )}
      </View>
    );
  };

  // Main render function
  const renderContent = () => {
    if (mode === 'setup') {
      switch (step) {
        case 1:
          return renderMethodSelection();
        case 2:
          return currentMethod === 'totp' ? renderQrCode() : 
                 <View>
                   <Text>SMS Setup - Phone number input would go here</Text>
                 </View>;
        case 3:
          return renderVerificationInput();
        case 4:
          return renderBackupCodes();
        default:
          return renderMethodSelection();
      }
    } else {
      return renderVerificationInput();
    }
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      {/* Header */}
      <View style={styles.header}>
        {showBackButton && (
          <TouchableOpacity 
            style={styles.backButton}
            onPress={onBack}
          >
            <Text style={[styles.backButtonText, { color: theme.primary }]}>
              ← Back
            </Text>
          </TouchableOpacity>
        )}
        
        <View style={styles.titleContainer}>
          <Text style={[styles.title, { color: theme.text }]}>
            {mode === 'setup' ? 'Setup 2FA' : mode === 'verification' ? 'Two-Factor Authentication' : 'Account Recovery'}
          </Text>
          <Text style={[styles.subtitle, { color: theme.textSecondary }]}>
            {mode === 'setup' && 'Secure your account with two-factor authentication'}
            {mode === 'verification' && 'Enter your verification code to continue'}
            {mode === 'recovery' && 'Use your backup code to regain access'}
          </Text>
        </View>
        
        {mode === 'setup' && (
          <View style={styles.progressContainer}>
            <Text style={[styles.progressText, { color: theme.textSecondary }]}>
              Step {step} of {totalSteps}
            </Text>
            <View style={[styles.progressBar, { backgroundColor: theme.surfaceVariant }]}>
              <View style={[
                styles.progressFill,
                { 
                  backgroundColor: theme.primary,
                  width: `${(step / totalSteps) * 100}%`
                }
              ]} />
            </View>
          </View>
        )}
      </View>

      {/* Content */}
      <ScrollView 
        style={styles.content}
        showsVerticalScrollIndicator={false}
        keyboardShouldPersistTaps="handled"
      >
        {renderContent()}
      </ScrollView>

      {/* Footer */}
      {mode === 'setup' && step < totalSteps && (
        <View style={styles.footer}>
          <TouchableOpacity
            style={[
              styles.continueButton,
              { backgroundColor: isLoading ? theme.surfaceVariant : theme.primary }
            ]}
            onPress={() => {
              if (step === 1) {
                setStep(2);
                setTotalSteps(currentMethod === 'totp' ? 4 : 3);
              } else if (step === 2 && currentMethod === 'totp') {
                setStep(3);
              } else if (step === 3) {
                setStep(4);
              }
            }}
            disabled={isLoading}
          >
            {isLoading ? (
              <ActivityIndicator color={theme.onPrimary} />
            ) : (
              <Text style={[styles.continueButtonText, { color: theme.onPrimary }]}>
                Continue
              </Text>
            )}
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 24,
    paddingTop: Platform.OS === 'ios' ? 50 : 30,
    paddingBottom: 20,
  },
  backButton: {
    alignSelf: 'flex-start',
    marginBottom: 16,
  },
  backButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  titleContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    lineHeight: 22,
  },
  progressContainer: {
    alignItems: 'center',
  },
  progressText: {
    fontSize: 14,
    marginBottom: 8,
  },
  progressBar: {
    width: '100%',
    height: 4,
    borderRadius: 2,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 2,
  },
  content: {
    flex: 1,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 20,
    textAlign: 'center',
  },
  methodSelection: {
    marginBottom: 32,
  },
  methodCard: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    borderRadius: 16,
    borderWidth: 2,
    marginBottom: 16,
  },
  methodIcon: {
    alignItems: 'center',
    marginRight: 16,
  },
  methodEmoji: {
    fontSize: 32,
    marginBottom: 8,
  },
  recommendedBadge: {
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 12,
  },
  recommendedText: {
    fontSize: 10,
    fontWeight: '600',
  },
  methodInfo: {
    flex: 1,
  },
  methodTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 4,
  },
  methodSubtitle: {
    fontSize: 14,
  },
  methodSelector: {
    marginLeft: 16,
  },
  radioButton: {
    width: 24,
    height: 24,
    borderRadius: 12,
    borderWidth: 2,
    alignItems: 'center',
    justifyContent: 'center',
  },
  radioInner: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  qrContainer: {
    alignItems: 'center',
    padding: 24,
    borderRadius: 16,
    marginBottom: 32,
  },
  qrCode: {
    width: 200,
    height: 200,
    borderRadius: 16,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 24,
  },
  qrText: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 8,
  },
  qrSubtext: {
    fontSize: 12,
  },
  qrInstructions: {
    alignItems: 'center',
    marginBottom: 20,
  },
  instructionTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 12,
  },
  instructionText: {
    fontSize: 14,
    marginBottom: 4,
  },
  manualEntryButton: {
    paddingVertical: 8,
  },
  manualEntryText: {
    fontSize: 14,
    fontWeight: '500',
    textDecorationLine: 'underline',
  },
  verificationContainer: {
    alignItems: 'center',
    marginBottom: 32,
  },
  verificationHeader: {
    alignItems: 'center',
    marginBottom: 32,
  },
  verificationTitle: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 8,
  },
  verificationSubtitle: {
    fontSize: 14,
    textAlign: 'center',
    lineHeight: 20,
  },
  codeInputContainer: {
    width: '100%',
    marginBottom: 24,
  },
  codeInput: {
    width: '100%',
    paddingVertical: 20,
    paddingHorizontal: 16,
    borderRadius: 12,
    borderWidth: 2,
    fontSize: 20,
    fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',
  },
  alternativeMethods: {
    alignItems: 'center',
    marginBottom: 24,
  },
  alternativeText: {
    fontSize: 14,
    marginBottom: 8,
  },
  alternativeButtons: {
    flexDirection: 'row',
    gap: 16,
  },
  alternativeLink: {
    fontSize: 14,
    fontWeight: '500',
    textDecorationLine: 'underline',
  },
  verifyButton: {
    width: '100%',
    paddingVertical: 18,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
  },
  verifyButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  attemptsWarning: {
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 8,
  },
  cooldownText: {
    fontSize: 14,
    textAlign: 'center',
    fontWeight: '500',
  },
  backupCodesContainer: {
    marginBottom: 32,
  },
  backupHeader: {
    padding: 20,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 20,
  },
  backupTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 8,
  },
  backupSubtitle: {
    fontSize: 14,
    textAlign: 'center',
    lineHeight: 20,
  },
  codesGrid: {
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
  },
  codeItem: {
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    alignItems: 'center',
  },
  codeText: {
    fontSize: 16,
    fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',
    fontWeight: '600',
  },
  backupActions: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 20,
  },
  backupButton: {
    flex: 1,
    paddingVertical: 14,
    borderRadius: 12,
    alignItems: 'center',
  },
  backupButtonText: {
    fontSize: 14,
    fontWeight: '600',
  },
  warningBox: {
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'rgba(239, 68, 68, 0.3)',
  },
  warningText: {
    fontSize: 13,
    lineHeight: 18,
    textAlign: 'center',
  },
  footer: {
    padding: 24,
    paddingBottom: Platform.OS === 'ios' ? 34 : 24,
  },
  continueButton: {
    width: '100%',
    paddingVertical: 18,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  continueButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
});

export default TwoFactorAuth;